(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{282:function(a,s,t){"use strict";t.r(s);var v=t(14),_=Object(v.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"jvm概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm概述"}},[a._v("#")]),a._v(" JVM概述")]),a._v(" "),s("blockquote",[s("p",[a._v("jvm作用")])]),a._v(" "),s("ul",[s("li",[a._v("负责将字节码加载到内存（运行时数据区）")]),a._v(" "),s("li",[a._v("负责存储数据")]),a._v(" "),s("li",[a._v("将字节码编译成机器码，运行")]),a._v(" "),s("li",[a._v("垃圾回收机制")])]),a._v(" "),s("blockquote",[s("p",[a._v("jvm组成")])]),a._v(" "),s("ul",[s("li",[a._v("类加载器")]),a._v(" "),s("li",[a._v("运行时数据区（存储运行时数据，本地方法栈，java虚拟机栈，堆，方法区，程序计数器）")]),a._v(" "),s("li",[a._v("执行引擎（更加底层，将字节码翻译成机器码）")]),a._v(" "),s("li",[a._v("本地方法接口")]),a._v(" "),s("li",[a._v("垃圾回收")])]),a._v(" "),s("h1",{attrs:{id:"类加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类加载器"}},[a._v("#")]),a._v(" 类加载器")]),a._v(" "),s("h2",{attrs:{id:"作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[a._v("#")]),a._v(" 作用")]),a._v(" "),s("p",[a._v("负责从硬盘、网络中加载字节码信息；")]),a._v(" "),s("p",[a._v("加载到内存中（运行时数据区的方法区中）")]),a._v(" "),s("h2",{attrs:{id:"类加载过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类加载过程"}},[a._v("#")]),a._v(" 类加载过程")]),a._v(" "),s("p",[s("strong",[a._v("加载")])]),a._v(" "),s("p",[a._v("io读取字节码文件；")]),a._v(" "),s("p",[a._v("转换并存储，为每个类创建一个Class对象；")]),a._v(" "),s("p",[a._v("存储在方法区；")]),a._v(" "),s("p",[s("strong",[a._v("链接")])]),a._v(" "),s("blockquote",[s("p",[a._v("验证")])]),a._v(" "),s("p",[a._v("对字节码文件格式验证，文件是否被污染；")]),a._v(" "),s("p",[a._v("对基本的语法格式进行验证")]),a._v(" "),s("blockquote",[s("p",[a._v("准备")])]),a._v(" "),s("p",[a._v("为静态的变量进行内存分配")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("123")]),a._v("；\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//value 在准备阶段后的初始值是 0,而不是 123")]),a._v("\n")])])]),s("p",[a._v("静态常量在编译期间就初始化")]),a._v(" "),s("blockquote",[s("p",[a._v("解析")])]),a._v(" "),s("p",[a._v("将符号引用转换为直接引用")]),a._v(" "),s("p",[a._v("将字节码中的表现形式转为内存中表现（内存地址）")]),a._v(" "),s("p",[s("strong",[a._v("初始化")])]),a._v(" "),s("p",[a._v("类的初始化，为类中的定义的静态变量进行赋值")]),a._v(" "),s("p",[a._v("public static int value = 123；这时就是123；")]),a._v(" "),s("h2",{attrs:{id:"类什么时候初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类什么时候初始化"}},[a._v("#")]),a._v(" 类什么时候初始化")]),a._v(" "),s("ul",[s("li",[a._v("再类中运行main方法")]),a._v(" "),s("li",[a._v('反射Class.forname（""）')]),a._v(" "),s("li",[a._v("创建对象")]),a._v(" "),s("li",[a._v("子类被加载")]),a._v(" "),s("li",[a._v("适用类的静态变量、静态方法")])]),a._v(" "),s("blockquote",[s("p",[a._v("以下两种情况不会初始化")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//编译期间赋值的静态常量")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" users "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//作为数组类型")]),a._v("\n")])])]),s("h2",{attrs:{id:"类加载器-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类加载器-2"}},[a._v("#")]),a._v(" 类加载器")]),a._v(" "),s("p",[a._v("具体的负责加载类的一些代码")]),a._v(" "),s("blockquote",[s("h5",{attrs:{id:"引导类加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引导类加载器"}},[a._v("#")]),a._v(" 引导类加载器")]),a._v(" "),s("p",[a._v("用c、c++开发，负责加载java核心类库")]),a._v(" "),s("p",[a._v("与java语言无关")])]),a._v(" "),s("blockquote",[s("h5",{attrs:{id:"扩展类加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扩展类加载器"}},[a._v("#")]),a._v(" 扩展类加载器")]),a._v(" "),s("p",[a._v("java语言编写")]),a._v(" "),s("ol",[s("li",[a._v("由 sun.misc.Launcher$ExtClassLoader 实现,继承ClassLoader类；")]),a._v(" "),s("li",[a._v("从 JDK 系统安装目录的 jre/lib/ext 子目录(扩展目录)下加载类库")])])]),a._v(" "),s("blockquote",[s("h5",{attrs:{id:"应用程序类加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用程序类加载器"}},[a._v("#")]),a._v(" 应用程序类加载器")]),a._v(" "),s("p",[a._v("Java 语言编写的")]),a._v(" "),s("ol",[s("li",[a._v("由 sun.misc.Launcher$AppClassLoader 实现.   派生于 ClassLoader 类")]),a._v(" "),s("li",[a._v("加载程序中自己开发的类")])])]),a._v(" "),s("h2",{attrs:{id:"双亲委派机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派机制"}},[a._v("#")]),a._v(" 双亲委派机制")]),a._v(" "),s("blockquote",[s("p",[a._v("为了先确保加载系统类")])]),a._v(" "),s("ol",[s("li",[a._v("加载一个类时,先委托给父类加载器加载,如果父加载器没有找到,继续向上级委托,直到引导类加载器.")]),a._v(" "),s("li",[a._v("父级找到就返回,父级如果最终没有找到,就委派给子级加载器,")]),a._v(" "),s("li",[a._v("最终没有找到,报ClassNotFoundException.")])])])}),[],!1,null,null,null);s.default=_.exports}}]);